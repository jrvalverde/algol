type token =
  | Identifier of (Table.Id.t)
  | String of (string)
  | Real of (string * string)
  | Imaginary of (string * string)
  | LongReal of (string * string)
  | LongImaginary of (string * string)
  | Bits of (string)
  | Integer of (string)
  | C of (string)
  | FULLSTOP
  | EOF
  | TRUE
  | FALSE
  | NULL
  | IF
  | THEN
  | ELSE
  | CASE
  | OF
  | WHILE
  | DO
  | ASSERT
  | GOTO
  | FOR
  | UNTIL
  | STEP
  | AND
  | OR
  | SHL
  | SHR
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | DIV
  | REM
  | STARSTAR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | IS
  | ASSIGN
  | BEGIN
  | COLON
  | SEMICOLON
  | END
  | BRA
  | COMMA
  | BAR
  | KET
  | INTEGER
  | REAL
  | COMPLEX
  | LONG_REAL
  | LONG_COMPLEX
  | LOGICAL
  | BITS
  | STRING
  | REFERENCE
  | LONG
  | SHORT
  | ABS
  | NOT
  | ARRAY
  | COLONCOLON
  | PROCEDURE
  | VALUE
  | RESULT
  | RECORD

open Parsing;;
# 34 "parser.mly"
  let pos i = Location.of_position (Parsing.rhs_start_pos i)
  let rhs_end_pos i = Location.of_position (Parsing.rhs_end_pos i)
  let symbol_start_pos () = Location.of_position (Parsing.symbol_start_pos ())
# 81 "parser.ml"
let yytransl_const = [|
  266 (* FULLSTOP *);
    0 (* EOF *);
  267 (* TRUE *);
  268 (* FALSE *);
  269 (* NULL *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELSE *);
  273 (* CASE *);
  274 (* OF *);
  275 (* WHILE *);
  276 (* DO *);
  277 (* ASSERT *);
  278 (* GOTO *);
  279 (* FOR *);
  280 (* UNTIL *);
  281 (* STEP *);
  282 (* AND *);
  283 (* OR *);
  284 (* SHL *);
  285 (* SHR *);
  286 (* PLUS *);
  287 (* MINUS *);
  288 (* STAR *);
  289 (* SLASH *);
  290 (* DIV *);
  291 (* REM *);
  292 (* STARSTAR *);
  293 (* EQ *);
  294 (* NE *);
  295 (* GT *);
  296 (* LT *);
  297 (* GE *);
  298 (* LE *);
  299 (* IS *);
  300 (* ASSIGN *);
  301 (* BEGIN *);
  302 (* COLON *);
  303 (* SEMICOLON *);
  304 (* END *);
  305 (* BRA *);
  306 (* COMMA *);
  307 (* BAR *);
  308 (* KET *);
  309 (* INTEGER *);
  310 (* REAL *);
  311 (* COMPLEX *);
  312 (* LONG_REAL *);
  313 (* LONG_COMPLEX *);
  314 (* LOGICAL *);
  315 (* BITS *);
  316 (* STRING *);
  317 (* REFERENCE *);
  318 (* LONG *);
  319 (* SHORT *);
  320 (* ABS *);
  321 (* NOT *);
  322 (* ARRAY *);
  323 (* COLONCOLON *);
  324 (* PROCEDURE *);
  325 (* VALUE *);
  326 (* RESULT *);
  327 (* RECORD *);
    0|]

let yytransl_block = [|
  257 (* Identifier *);
  258 (* String *);
  259 (* Real *);
  260 (* Imaginary *);
  261 (* LongReal *);
  262 (* LongImaginary *);
  263 (* Bits *);
  264 (* Integer *);
  265 (* C *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\032\000\032\000\002\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\008\000\008\000\033\000\
\033\000\003\000\003\000\006\000\006\000\004\000\004\000\004\000\
\004\000\005\000\005\000\009\000\009\000\009\000\009\000\009\000\
\013\000\013\000\014\000\014\000\014\000\014\000\010\000\011\000\
\011\000\011\000\012\000\012\000\015\000\015\000\015\000\015\000\
\017\000\017\000\016\000\016\000\016\000\018\000\018\000\018\000\
\018\000\018\000\019\000\020\000\021\000\030\000\030\000\027\000\
\023\000\024\000\024\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\026\000\
\026\000\022\000\022\000\035\000\035\000\035\000\034\000\034\000\
\028\000\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\031\000\031\000\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\004\000\004\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\002\000\
\001\000\003\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\004\000\001\000\003\000\002\000\
\001\000\003\000\002\000\001\000\002\000\001\000\002\000\003\000\
\003\000\001\000\003\000\003\000\004\000\006\000\005\000\005\000\
\006\000\006\000\003\000\002\000\001\000\000\000\003\000\007\000\
\009\000\005\000\002\000\001\000\001\000\004\000\006\000\009\000\
\001\000\003\000\001\000\001\000\000\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\006\000\001\000\003\000\003\000\
\005\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\004\000\001\000\004\000\004\000\004\000\001\000\
\003\000\006\000\005\000\001\000\002\000\000\000\003\000\000\000\
\001\000\003\000\002\000\003\000\003\000\004\000\004\000\003\000\
\006\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\057\000\009\000\010\000\011\000\
\012\000\014\000\008\000\052\000\015\000\016\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\000\000\108\000\109\000\110\000\111\000\112\000\113\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\140\000\018\000\000\000\000\000\000\000\020\000\021\000\022\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\
\000\000\098\000\094\000\095\000\097\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\099\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\
\033\000\000\000\000\000\000\000\063\000\000\000\059\000\000\000\
\000\000\005\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\002\000\000\000\056\000\000\000\007\000\120\000\000\000\000\000\
\091\000\000\000\089\000\000\000\000\000\000\000\000\000\079\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\061\000\064\000\058\000\067\000\000\000\000\000\
\036\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\115\000\117\000\118\000\119\000\000\000\000\000\
\000\000\129\000\000\000\003\000\004\000\000\000\106\000\000\000\
\000\000\000\000\121\000\000\000\000\000\090\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\127\000\000\000\000\000\123\000\000\000\000\000\105\000\000\000\
\102\000\000\000\087\000\000\000\000\000\000\000\074\000\073\000\
\000\000\000\000\000\000\136\000\000\000\000\000\000\000\000\000\
\000\000\130\000\125\000\122\000\107\000\000\000\000\000\101\000\
\000\000\000\000\080\000\000\000\000\000\135\000\000\000\000\000\
\103\000\000\000\000\000\138\000\000\000\088\000\081\000\000\000\
\137\000\139\000"

let yydgoto = "\003\000\
\041\000\056\000\042\000\043\000\044\000\087\000\219\000\177\000\
\046\000\047\000\048\000\128\000\049\000\203\000\050\000\123\000\
\124\000\057\000\058\000\059\000\060\000\061\000\062\000\192\000\
\053\000\120\000\225\000\185\000\186\000\226\000\005\001\110\000\
\054\000\137\000\220\000"

let yysindex = "\134\000\
\089\005\156\255\000\000\241\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\007\
\038\007\038\007\038\007\039\255\042\255\038\007\038\007\049\255\
\000\000\225\005\000\000\000\000\000\000\000\000\000\000\000\000\
\016\255\026\255\036\255\038\007\038\007\038\007\038\007\068\255\
\000\000\000\000\034\006\156\255\146\004\000\000\000\000\000\000\
\000\000\069\255\062\255\002\000\048\255\120\255\138\255\000\000\
\171\000\000\000\000\000\000\000\000\000\000\000\055\255\164\006\
\191\004\170\007\240\007\088\008\000\000\134\255\109\255\109\255\
\000\000\143\007\137\255\188\255\015\255\207\255\000\000\000\000\
\000\000\122\008\154\255\033\255\000\000\224\255\000\000\025\008\
\181\255\000\000\000\000\038\007\038\007\038\007\038\007\038\007\
\038\007\038\007\038\007\038\007\038\007\038\007\038\007\038\007\
\038\007\038\007\038\007\038\007\038\007\000\000\038\007\157\005\
\000\000\009\000\000\000\225\255\000\000\000\000\207\255\226\255\
\000\000\188\007\000\000\082\255\229\006\006\255\038\007\000\000\
\038\007\000\000\037\000\251\255\006\000\014\000\140\255\126\255\
\017\000\000\000\000\000\000\000\000\000\000\000\122\008\106\008\
\000\000\000\000\109\255\109\255\003\255\003\255\003\255\003\255\
\000\000\202\255\202\255\202\255\202\255\202\255\202\255\202\255\
\088\008\146\004\002\000\154\255\199\255\169\255\055\000\059\000\
\164\006\041\000\038\007\234\004\038\007\038\007\088\008\050\008\
\007\255\000\000\000\000\000\000\000\000\000\000\207\255\061\255\
\237\254\000\000\103\007\000\000\000\000\044\000\000\000\250\254\
\207\255\038\007\000\000\042\000\088\008\000\000\038\007\088\008\
\038\007\088\008\128\255\088\008\145\255\038\007\038\007\038\007\
\000\000\194\255\207\255\207\255\010\255\207\255\226\255\126\255\
\000\000\022\255\088\008\000\000\103\007\199\255\000\000\124\255\
\000\000\149\255\000\000\214\007\088\008\038\007\000\000\000\000\
\240\007\070\008\088\008\000\000\212\255\194\255\207\255\226\255\
\226\255\000\000\000\000\000\000\000\000\038\007\038\007\000\000\
\092\000\088\008\000\000\038\007\069\000\000\000\226\255\088\008\
\000\000\050\000\240\007\000\000\152\255\000\000\000\000\071\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\255\018\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\006\000\000\000\000\000\000\000\000\
\000\000\089\000\000\000\000\000\000\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\255\
\000\000\000\000\000\000\101\004\000\000\000\000\018\002\062\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\248\003\061\000\002\008\000\000\177\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\190\255\000\000\000\000\054\001\000\000\221\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\004\080\004\
\000\000\000\000\107\002\151\002\098\001\142\001\186\001\230\001\
\000\000\195\002\239\002\027\003\071\003\115\003\160\003\204\003\
\145\004\000\000\000\000\061\000\000\000\000\000\000\000\000\000\
\189\255\045\000\000\000\032\005\175\255\000\000\189\004\009\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\190\255\000\000\000\000\233\004\
\009\001\216\255\000\000\197\255\000\000\000\000\000\000\000\000\
\000\000\253\254\000\000\000\000\000\000\000\000\014\255\000\000\
\000\000\038\004\012\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\021\005\223\255\000\000\000\000\
\000\000\000\000\000\255\000\000\000\000\253\254\000\000\020\255\
\021\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\232\255\000\000\000\000\000\000\000\000\065\255\198\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\173\255\255\255\188\000\
\000\000\000\000\000\000\087\255\000\000\000\000\000\000\197\000\
\000\000\067\001\132\001\117\255\000\000\013\000\000\000\000\000\
\004\000\191\255\143\000\000\000\175\000\000\000\000\000\208\255\
\000\000\099\255\173\000"

let yytablesize = 2469
let yytable = "\045\000\
\085\000\091\000\126\000\113\000\141\000\063\000\190\000\209\000\
\114\000\100\000\118\000\124\000\135\000\052\000\065\000\066\000\
\067\000\068\000\116\000\055\000\071\000\072\000\133\000\243\000\
\074\000\191\000\127\000\216\000\054\000\075\000\094\000\095\000\
\217\000\064\000\079\000\080\000\081\000\082\000\102\000\069\000\
\222\000\088\000\070\000\128\000\086\000\223\000\134\000\063\000\
\128\000\055\000\173\000\055\000\236\000\166\000\174\000\118\000\
\208\000\073\000\054\000\114\000\131\000\118\000\122\000\251\000\
\076\000\131\000\132\000\133\000\083\000\116\000\064\000\132\000\
\133\000\114\000\077\000\114\000\114\000\114\000\138\000\239\000\
\254\000\064\000\245\000\116\000\078\000\116\000\116\000\116\000\
\025\000\007\001\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\151\000\152\000\153\000\154\000\155\000\156\000\
\157\000\158\000\159\000\160\000\112\000\161\000\162\000\134\000\
\111\000\188\000\189\000\114\000\134\000\210\000\215\000\231\000\
\119\000\115\000\114\000\172\000\163\000\175\000\211\000\176\000\
\212\000\213\000\214\000\169\000\013\000\170\000\001\000\002\000\
\094\000\095\000\116\000\184\000\098\000\099\000\100\000\101\000\
\102\000\237\000\238\000\240\000\241\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\197\000\
\193\000\200\000\117\000\202\000\204\000\255\000\230\000\086\000\
\060\000\129\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\024\000\131\000\167\000\246\000\182\000\
\224\000\183\000\208\000\132\000\232\000\228\000\247\000\229\000\
\248\000\008\001\136\000\009\001\233\000\234\000\235\000\118\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\194\000\167\000\184\000\084\000\078\000\078\000\040\000\
\139\000\193\000\055\000\142\000\250\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\093\000\092\000\
\093\000\092\000\136\000\167\000\000\001\224\000\054\000\104\000\
\054\000\104\000\003\001\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\253\000\167\000\077\000\077\000\
\072\000\164\000\085\000\090\000\126\000\076\000\076\000\085\000\
\085\000\165\000\085\000\167\000\085\000\124\000\075\000\075\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\178\000\179\000\085\000\
\085\000\126\000\085\000\085\000\085\000\068\000\086\000\195\000\
\100\000\180\000\124\000\086\000\086\000\100\000\086\000\187\000\
\086\000\181\000\196\000\085\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
\086\000\199\000\221\000\086\000\086\000\227\000\086\000\086\000\
\086\000\040\000\025\000\002\001\004\001\006\001\010\001\025\000\
\025\000\205\000\025\000\128\000\025\000\198\000\089\000\086\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\051\000\001\001\242\000\025\000\
\025\000\244\000\025\000\025\000\025\000\041\000\013\000\000\000\
\000\000\000\000\000\000\013\000\013\000\000\000\013\000\000\000\
\013\000\000\000\000\000\025\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\000\000\000\000\013\000\013\000\000\000\013\000\013\000\
\013\000\042\000\060\000\000\000\000\000\000\000\000\000\060\000\
\060\000\000\000\060\000\000\000\060\000\000\000\000\000\013\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\000\000\000\000\000\000\060\000\
\060\000\000\000\060\000\060\000\060\000\043\000\084\000\000\000\
\000\000\000\000\000\000\084\000\084\000\000\000\084\000\000\000\
\084\000\000\000\000\000\060\000\084\000\084\000\084\000\084\000\
\084\000\084\000\000\000\000\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
\000\000\000\000\000\000\084\000\084\000\000\000\084\000\084\000\
\084\000\028\000\072\000\000\000\000\000\000\000\000\000\072\000\
\072\000\000\000\072\000\000\000\072\000\000\000\000\000\084\000\
\072\000\072\000\072\000\072\000\072\000\072\000\000\000\000\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\000\000\000\000\000\000\072\000\
\072\000\000\000\072\000\072\000\072\000\029\000\000\000\068\000\
\000\000\000\000\000\000\000\000\068\000\000\000\000\000\068\000\
\000\000\068\000\000\000\072\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\000\000\068\000\068\000\000\000\068\000\
\068\000\068\000\038\000\040\000\000\000\000\000\000\000\000\000\
\040\000\040\000\000\000\040\000\000\000\040\000\000\000\000\000\
\068\000\040\000\040\000\040\000\040\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\000\000\000\000\000\000\
\040\000\040\000\000\000\040\000\040\000\040\000\039\000\041\000\
\000\000\000\000\000\000\000\000\041\000\041\000\000\000\041\000\
\000\000\041\000\000\000\000\000\040\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\000\000\041\000\041\000\000\000\041\000\
\041\000\041\000\045\000\042\000\000\000\000\000\000\000\000\000\
\042\000\042\000\000\000\042\000\000\000\042\000\000\000\000\000\
\041\000\042\000\042\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\042\000\042\000\000\000\042\000\042\000\042\000\046\000\043\000\
\000\000\000\000\000\000\000\000\043\000\043\000\000\000\043\000\
\000\000\043\000\000\000\000\000\042\000\043\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\043\000\043\000\000\000\043\000\
\043\000\043\000\047\000\028\000\000\000\000\000\000\000\000\000\
\028\000\028\000\000\000\028\000\000\000\028\000\000\000\000\000\
\043\000\028\000\028\000\028\000\028\000\000\000\000\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\000\000\000\000\000\000\
\028\000\028\000\000\000\028\000\028\000\028\000\048\000\029\000\
\000\000\000\000\000\000\000\000\029\000\029\000\000\000\029\000\
\000\000\029\000\000\000\000\000\028\000\029\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\000\000\029\000\029\000\000\000\029\000\
\029\000\029\000\049\000\000\000\038\000\000\000\000\000\000\000\
\000\000\038\000\038\000\000\000\038\000\000\000\038\000\000\000\
\029\000\000\000\038\000\038\000\038\000\038\000\000\000\000\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\
\000\000\038\000\038\000\000\000\038\000\038\000\038\000\050\000\
\039\000\000\000\000\000\000\000\000\000\039\000\039\000\000\000\
\039\000\000\000\039\000\000\000\000\000\038\000\039\000\039\000\
\039\000\039\000\000\000\000\000\039\000\039\000\000\000\000\000\
\000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\039\000\039\000\000\000\
\039\000\039\000\039\000\051\000\045\000\000\000\000\000\000\000\
\000\000\045\000\045\000\000\000\045\000\000\000\045\000\000\000\
\000\000\039\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\045\000\045\000\000\000\045\000\045\000\045\000\030\000\
\046\000\000\000\000\000\000\000\000\000\046\000\046\000\000\000\
\046\000\000\000\046\000\000\000\000\000\045\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\046\000\046\000\000\000\
\046\000\046\000\046\000\034\000\047\000\085\000\000\000\000\000\
\000\000\047\000\047\000\000\000\047\000\000\000\047\000\000\000\
\000\000\046\000\047\000\047\000\047\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\000\000\047\000\047\000\047\000\035\000\
\048\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\
\048\000\000\000\048\000\000\000\000\000\047\000\048\000\048\000\
\048\000\048\000\000\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\048\000\048\000\000\000\
\048\000\048\000\048\000\000\000\049\000\000\000\000\000\000\000\
\000\000\049\000\049\000\000\000\049\000\000\000\049\000\000\000\
\000\000\048\000\049\000\049\000\049\000\049\000\000\000\000\000\
\026\000\091\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\049\000\049\000\000\000\049\000\049\000\049\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\050\000\050\000\
\000\000\050\000\000\000\050\000\000\000\049\000\000\000\050\000\
\050\000\050\000\050\000\000\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\000\000\000\000\050\000\050\000\
\000\000\050\000\050\000\050\000\000\000\051\000\000\000\000\000\
\000\000\000\000\051\000\051\000\000\000\051\000\000\000\051\000\
\000\000\000\000\050\000\051\000\051\000\051\000\051\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\000\000\051\000\051\000\000\000\051\000\051\000\051\000\
\000\000\030\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\030\000\000\000\030\000\000\000\000\000\051\000\030\000\
\030\000\030\000\030\000\000\000\070\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\030\000\
\000\000\030\000\030\000\030\000\000\000\034\000\000\000\085\000\
\000\000\000\000\034\000\034\000\000\000\034\000\000\000\034\000\
\000\000\000\000\030\000\034\000\034\000\034\000\034\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\034\000\034\000\085\000\034\000\034\000\034\000\
\000\000\035\000\000\000\000\000\000\000\000\000\035\000\035\000\
\000\000\035\000\000\000\035\000\000\000\000\000\034\000\035\000\
\035\000\000\000\035\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\024\000\024\000\000\000\024\000\000\000\
\024\000\000\000\000\000\000\000\024\000\024\000\035\000\035\000\
\000\000\035\000\035\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\024\000\024\000\000\000\024\000\024\000\
\024\000\000\000\026\000\090\000\000\000\000\000\000\000\026\000\
\026\000\000\000\026\000\000\000\026\000\000\000\000\000\024\000\
\026\000\026\000\000\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\000\000\000\000\026\000\
\026\000\000\000\026\000\026\000\026\000\000\000\083\000\000\000\
\000\000\000\000\000\000\083\000\083\000\125\000\083\000\000\000\
\083\000\000\000\000\000\026\000\083\000\083\000\000\000\000\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\083\000\083\000\000\000\083\000\083\000\
\083\000\000\000\071\000\000\000\000\000\000\000\000\000\071\000\
\071\000\201\000\071\000\000\000\071\000\000\000\000\000\083\000\
\071\000\071\000\000\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\000\000\000\000\071\000\
\071\000\000\000\071\000\071\000\071\000\000\000\070\000\000\000\
\000\000\000\000\000\000\070\000\070\000\000\000\070\000\000\000\
\070\000\069\000\000\000\071\000\070\000\070\000\069\000\000\000\
\000\000\069\000\000\000\069\000\000\000\000\000\000\000\069\000\
\069\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\070\000\070\000\000\000\070\000\070\000\
\070\000\000\000\000\000\000\000\000\000\000\000\069\000\069\000\
\000\000\069\000\069\000\069\000\000\000\000\000\000\000\070\000\
\000\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\069\000\013\000\014\000\015\000\016\000\000\000\
\000\000\017\000\000\000\018\000\000\000\019\000\020\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\023\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\000\000\000\000\040\000\004\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\012\000\000\000\013\000\
\014\000\015\000\016\000\000\000\000\000\017\000\000\000\018\000\
\000\000\019\000\020\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\000\000\000\000\
\040\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\011\000\012\000\000\000\013\000\014\000\015\000\016\000\000\000\
\000\000\017\000\000\000\018\000\000\000\019\000\020\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\084\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\000\000\013\000\014\000\015\000\016\000\
\000\000\000\000\017\000\000\000\018\000\000\000\019\000\020\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\085\000\086\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\000\000\000\000\062\000\000\000\062\000\000\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\000\000\062\000\062\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\062\000\062\000\062\000\004\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\000\000\013\000\014\000\
\015\000\016\000\000\000\000\000\017\000\000\000\018\000\000\000\
\019\000\020\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\023\000\121\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\004\000\005\000\006\000\
\007\000\008\000\009\000\010\000\011\000\012\000\000\000\013\000\
\014\000\015\000\016\000\000\000\171\000\017\000\000\000\018\000\
\000\000\019\000\020\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\022\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\000\000\
\013\000\014\000\015\000\016\000\000\000\000\000\017\000\000\000\
\018\000\000\000\019\000\020\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\038\000\039\000\218\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\000\000\013\000\014\000\015\000\016\000\000\000\000\000\017\000\
\000\000\018\000\000\000\019\000\020\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\022\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\037\000\038\000\039\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\000\000\126\000\000\000\000\000\000\000\000\000\
\000\000\000\000\130\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\168\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\249\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\000\000\000\000\
\085\000\085\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\000\000\000\000\000\000\140\000\
\086\000\206\000\207\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\252\000\000\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\092\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000"

let yycheck = "\001\000\
\000\000\000\000\000\000\052\000\088\000\002\000\164\000\177\000\
\001\001\000\000\001\001\000\000\078\000\001\000\016\000\017\000\
\018\000\019\000\001\001\020\001\022\000\023\000\008\001\002\001\
\026\000\165\000\020\001\047\001\020\001\026\000\028\001\029\001\
\052\001\049\001\036\000\037\000\038\000\039\000\036\001\001\001\
\047\001\043\000\001\001\047\001\000\000\052\001\032\001\044\000\
\052\001\050\001\045\001\052\001\210\000\119\000\049\001\001\001\
\050\001\009\001\050\001\052\001\047\001\001\001\064\000\233\000\
\049\001\052\001\047\001\047\001\001\001\052\001\049\001\052\001\
\052\001\066\001\049\001\068\001\069\001\070\001\046\001\070\001\
\238\000\049\001\222\000\066\001\049\001\068\001\069\001\070\001\
\000\000\003\001\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\047\001\111\000\112\000\047\001\
\044\001\162\000\163\000\068\001\052\001\183\000\184\000\203\000\
\066\001\002\001\068\001\125\000\112\000\127\000\066\001\129\000\
\068\001\069\001\070\001\050\001\000\000\052\001\001\000\002\000\
\028\001\029\001\001\001\136\000\032\001\033\001\034\001\035\001\
\036\001\211\000\212\000\213\000\214\000\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\169\000\
\165\000\171\000\000\000\173\000\174\000\239\000\047\001\048\001\
\000\000\044\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\061\001\032\001\052\001\050\001\067\001\052\001\
\194\000\068\001\050\001\008\001\052\001\199\000\050\001\201\000\
\052\001\050\001\049\001\052\001\206\000\207\000\208\000\001\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\061\001\049\001\050\001\216\000\000\000\047\001\048\001\068\001\
\001\001\222\000\071\001\047\001\230\000\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\050\001\050\001\
\052\001\052\001\049\001\050\001\246\000\247\000\050\001\050\001\
\052\001\052\001\252\000\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\061\001\049\001\050\001\047\001\048\001\
\000\000\001\001\010\001\010\001\010\001\047\001\048\001\015\001\
\016\001\049\001\018\001\050\001\020\001\010\001\047\001\048\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\009\001\052\001\047\001\
\048\001\047\001\050\001\051\001\052\001\000\000\010\001\001\001\
\047\001\052\001\047\001\015\001\016\001\052\001\018\001\047\001\
\020\001\052\001\008\001\067\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\049\001\047\001\047\001\048\001\052\001\050\001\051\001\
\052\001\000\000\010\001\008\001\032\001\052\001\032\001\015\001\
\016\001\174\000\018\001\047\001\020\001\169\000\044\000\067\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\001\000\247\000\216\000\047\001\
\048\001\221\000\050\001\051\001\052\001\000\000\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\255\255\067\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\047\001\048\001\255\255\050\001\051\001\
\052\001\000\000\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\020\001\255\255\255\255\067\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\047\001\
\048\001\255\255\050\001\051\001\052\001\000\000\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\255\255\067\001\024\001\025\001\026\001\027\001\
\028\001\029\001\255\255\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\047\001\048\001\255\255\050\001\051\001\
\052\001\000\000\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\020\001\255\255\255\255\067\001\
\024\001\025\001\026\001\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\047\001\
\048\001\255\255\050\001\051\001\052\001\000\000\255\255\010\001\
\255\255\255\255\255\255\255\255\015\001\255\255\255\255\018\001\
\255\255\020\001\255\255\067\001\255\255\024\001\025\001\026\001\
\027\001\028\001\029\001\255\255\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\047\001\048\001\255\255\050\001\
\051\001\052\001\000\000\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\255\255\018\001\255\255\020\001\255\255\255\255\
\067\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\047\001\048\001\255\255\050\001\051\001\052\001\000\000\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\018\001\
\255\255\020\001\255\255\255\255\067\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\047\001\048\001\255\255\050\001\
\051\001\052\001\000\000\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\255\255\018\001\255\255\020\001\255\255\255\255\
\067\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\047\001\048\001\255\255\050\001\051\001\052\001\000\000\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\018\001\
\255\255\020\001\255\255\255\255\067\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\047\001\048\001\255\255\050\001\
\051\001\052\001\000\000\010\001\255\255\255\255\255\255\255\255\
\015\001\016\001\255\255\018\001\255\255\020\001\255\255\255\255\
\067\001\024\001\025\001\026\001\027\001\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\047\001\048\001\255\255\050\001\051\001\052\001\000\000\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\255\255\018\001\
\255\255\020\001\255\255\255\255\067\001\024\001\025\001\026\001\
\027\001\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\047\001\048\001\255\255\050\001\
\051\001\052\001\000\000\255\255\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\255\255\018\001\255\255\020\001\255\255\
\067\001\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\047\001\048\001\255\255\050\001\051\001\052\001\000\000\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\255\255\
\018\001\255\255\020\001\255\255\255\255\067\001\024\001\025\001\
\026\001\027\001\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\047\001\048\001\255\255\
\050\001\051\001\052\001\000\000\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\255\255\018\001\255\255\020\001\255\255\
\255\255\067\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\047\001\048\001\255\255\050\001\051\001\052\001\000\000\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\255\255\
\018\001\255\255\020\001\255\255\255\255\067\001\024\001\025\001\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\047\001\048\001\255\255\
\050\001\051\001\052\001\000\000\010\001\000\000\255\255\255\255\
\255\255\015\001\016\001\255\255\018\001\255\255\020\001\255\255\
\255\255\067\001\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\047\001\048\001\255\255\050\001\051\001\052\001\000\000\
\010\001\255\255\255\255\255\255\255\255\015\001\016\001\255\255\
\018\001\255\255\020\001\255\255\255\255\067\001\024\001\025\001\
\026\001\027\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\047\001\048\001\255\255\
\050\001\051\001\052\001\255\255\010\001\255\255\255\255\255\255\
\255\255\015\001\016\001\255\255\018\001\255\255\020\001\255\255\
\255\255\067\001\024\001\025\001\026\001\027\001\255\255\255\255\
\000\000\000\000\255\255\255\255\255\255\255\255\255\255\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\047\001\048\001\255\255\050\001\051\001\052\001\255\255\
\255\255\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\255\255\018\001\255\255\020\001\255\255\067\001\255\255\024\001\
\025\001\026\001\027\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\047\001\048\001\
\255\255\050\001\051\001\052\001\255\255\010\001\255\255\255\255\
\255\255\255\255\015\001\016\001\255\255\018\001\255\255\020\001\
\255\255\255\255\067\001\024\001\025\001\026\001\027\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\047\001\048\001\255\255\050\001\051\001\052\001\
\255\255\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\255\255\018\001\255\255\020\001\255\255\255\255\067\001\024\001\
\025\001\026\001\027\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\047\001\048\001\
\255\255\050\001\051\001\052\001\255\255\010\001\255\255\010\001\
\255\255\255\255\015\001\016\001\255\255\018\001\255\255\020\001\
\255\255\255\255\067\001\024\001\025\001\026\001\027\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\047\001\048\001\047\001\050\001\051\001\052\001\
\255\255\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\255\255\018\001\255\255\020\001\255\255\255\255\067\001\024\001\
\025\001\255\255\027\001\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\047\001\048\001\
\255\255\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\067\001\047\001\048\001\255\255\050\001\051\001\
\052\001\255\255\010\001\010\001\255\255\255\255\255\255\015\001\
\016\001\255\255\018\001\255\255\020\001\255\255\255\255\067\001\
\024\001\025\001\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\047\001\
\048\001\255\255\050\001\051\001\052\001\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\015\001\018\001\255\255\
\020\001\255\255\255\255\067\001\024\001\025\001\255\255\255\255\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\047\001\048\001\255\255\050\001\051\001\
\052\001\255\255\010\001\255\255\255\255\255\255\255\255\015\001\
\016\001\016\001\018\001\255\255\020\001\255\255\255\255\067\001\
\024\001\025\001\255\255\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\255\255\255\255\047\001\
\048\001\255\255\050\001\051\001\052\001\255\255\010\001\255\255\
\255\255\255\255\255\255\015\001\016\001\255\255\018\001\255\255\
\020\001\010\001\255\255\067\001\024\001\025\001\015\001\255\255\
\255\255\018\001\255\255\020\001\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\048\001\255\255\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\047\001\048\001\
\255\255\050\001\051\001\052\001\255\255\255\255\255\255\067\001\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\067\001\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\019\001\255\255\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\255\255\255\255\068\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\255\255\255\255\017\001\255\255\019\001\
\255\255\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\045\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\065\001\255\255\255\255\
\068\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\255\255\
\255\255\017\001\255\255\019\001\255\255\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\065\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\017\001\255\255\019\001\255\255\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\045\001\255\255\
\047\001\048\001\049\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\062\001\
\063\001\064\001\065\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\255\255\255\255\017\001\255\255\019\001\255\255\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\047\001\048\001\049\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\063\001\064\001\065\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\013\001\014\001\255\255\255\255\017\001\255\255\019\001\255\255\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\045\001\255\255\255\255\255\255\049\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\062\001\063\001\064\001\065\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\255\255\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\255\255\019\001\
\255\255\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\045\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\063\001\064\001\065\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\017\001\255\255\
\019\001\255\255\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\045\001\255\255\255\255\255\255\049\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\062\001\063\001\064\001\065\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\255\255\011\001\012\001\013\001\014\001\255\255\255\255\017\001\
\255\255\019\001\255\255\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\255\255\049\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\063\001\064\001\065\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\051\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\051\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\047\001\048\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\047\001\
\048\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\024\001\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001"

let yynames_const = "\
  FULLSTOP\000\
  EOF\000\
  TRUE\000\
  FALSE\000\
  NULL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  CASE\000\
  OF\000\
  WHILE\000\
  DO\000\
  ASSERT\000\
  GOTO\000\
  FOR\000\
  UNTIL\000\
  STEP\000\
  AND\000\
  OR\000\
  SHL\000\
  SHR\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  DIV\000\
  REM\000\
  STARSTAR\000\
  EQ\000\
  NE\000\
  GT\000\
  LT\000\
  GE\000\
  LE\000\
  IS\000\
  ASSIGN\000\
  BEGIN\000\
  COLON\000\
  SEMICOLON\000\
  END\000\
  BRA\000\
  COMMA\000\
  BAR\000\
  KET\000\
  INTEGER\000\
  REAL\000\
  COMPLEX\000\
  LONG_REAL\000\
  LONG_COMPLEX\000\
  LOGICAL\000\
  BITS\000\
  STRING\000\
  REFERENCE\000\
  LONG\000\
  SHORT\000\
  ABS\000\
  NOT\000\
  ARRAY\000\
  COLONCOLON\000\
  PROCEDURE\000\
  VALUE\000\
  RESULT\000\
  RECORD\000\
  "

let yynames_block = "\
  Identifier\000\
  String\000\
  Real\000\
  Imaginary\000\
  LongReal\000\
  LongImaginary\000\
  Bits\000\
  Integer\000\
  C\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'end_program) in
    Obj.repr(
# 121 "parser.mly"
                                                            ( (None,    _1) )
# 1031 "parser.ml"
               : Tree.t option * Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'end_program) in
    Obj.repr(
# 122 "parser.mly"
                                                            ( (None,    _1) )
# 1039 "parser.ml"
               : Tree.t option * Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'end_program) in
    Obj.repr(
# 123 "parser.mly"
                                                            ( (Some _1, _3) )
# 1048 "parser.ml"
               : Tree.t option * Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'end_program) in
    Obj.repr(
# 124 "parser.mly"
                                                            ( (Some _1, _3) )
# 1057 "parser.ml"
               : Tree.t option * Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
           ()
# 1063 "parser.ml"
               : 'end_program))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
           ()
# 1069 "parser.ml"
               : 'end_program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 134 "parser.mly"
                  ( _1 )
# 1076 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parser.mly"
                                 ( Tree.Integer       (pos 1, _1) )
# 1083 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 139 "parser.mly"
                                 ( Tree.Real          (pos 1, fst _1, snd _1) )
# 1090 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 140 "parser.mly"
                                 ( Tree.Imaginary     (pos 1, fst _1, snd _1) )
# 1097 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 141 "parser.mly"
                                 ( Tree.LongReal      (pos 1, fst _1, snd _1) )
# 1104 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * string) in
    Obj.repr(
# 142 "parser.mly"
                                 ( Tree.LongImaginary (pos 1, fst _1, snd _1) )
# 1111 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'strings) in
    Obj.repr(
# 143 "parser.mly"
                                 ( Tree.String        (pos 1, _1) )
# 1118 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 144 "parser.mly"
                                 ( Tree.Bits          (pos 1, _1) )
# 1125 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
                                 ( Tree.TRUE          (pos 1) )
# 1131 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                                 ( Tree.FALSE         (pos 1) )
# 1137 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                                 ( Tree.NULL          (pos 1) )
# 1143 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 149 "parser.mly"
                                 ( _1 )
# 1150 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 150 "parser.mly"
                                 ( _1 )
# 1157 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 151 "parser.mly"
                                 ( _1 )
# 1164 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 152 "parser.mly"
                                 ( _1 )
# 1171 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 153 "parser.mly"
                                 ( _1 )
# 1178 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 154 "parser.mly"
                                 ( Tree.GOTO (pos 1, _2) )
# 1185 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 155 "parser.mly"
                                 ( Tree.ASSERT (pos 1, _2) )
# 1192 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 157 "parser.mly"
                                 ( _1 )
# 1199 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 158 "parser.mly"
                                 ( Tree.Assignment (pos 1, _1, _3) )
# 1207 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 159 "parser.mly"
                                 ( _2 )
# 1214 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 161 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.IDENTITY, _2) )
# 1221 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 162 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.NEG, _2) )
# 1228 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 163 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.NOT, _2) )
# 1235 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 164 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.LONG, _2) )
# 1242 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 165 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.SHORT, _2) )
# 1249 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 166 "parser.mly"
                                 ( Tree.Unary (pos 1, Tree.ABS, _2) )
# 1256 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 168 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.AND,  _3) )
# 1264 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 169 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.OR,   _3) )
# 1272 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 170 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SHL,  _3) )
# 1280 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 171 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SHR,  _3) )
# 1288 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 172 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.ADD,  _3) )
# 1296 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 173 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.SUB,  _3) )
# 1304 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 174 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.MUL,  _3) )
# 1312 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 175 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.RDIV, _3) )
# 1320 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 176 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.IDIV, _3) )
# 1328 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 177 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.REM,  _3) )
# 1336 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 178 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.PWR,  _3) )
# 1344 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 179 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.EQ,   _3) )
# 1352 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 180 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.NE,   _3) )
# 1360 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 181 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.GT,   _3) )
# 1368 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 182 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.LT,   _3) )
# 1376 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 183 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.GE,   _3) )
# 1384 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 184 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.LE,   _3) )
# 1392 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 185 "parser.mly"
                                 ( Tree.Binary (pos 2, _1, Tree.IS,   _3) )
# 1400 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 187 "parser.mly"
                                 ( Tree.C_code (pos 1, None, _1) )
# 1407 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 188 "parser.mly"
                                 ( Tree.C_code (pos 1, Some _2, _4) )
# 1415 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 192 "parser.mly"
                                    ( [_1] )
# 1422 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 193 "parser.mly"
                                    ( _1 @ [_3] )
# 1430 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'strings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "parser.mly"
                  ( _1 ^ _2 )
# 1438 "parser.ml"
               : 'strings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 199 "parser.mly"
                  ( _1 )
# 1445 "parser.ml"
               : 'strings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list * Tree.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 209 "parser.mly"
                                        ( Tree.BEGIN (pos 1, fst _1, snd _1 @ [_2]) )
# 1454 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list * Tree.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 210 "parser.mly"
                                        ( Tree.BEGIN (pos 1, fst _1, snd _1 @ [Tree.Empty (pos 2)]) )
# 1462 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 214 "parser.mly"
                 ()
# 1468 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 215 "parser.mly"
                 ()
# 1475 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t list) in
    Obj.repr(
# 219 "parser.mly"
                                   ( (_1,     []) )
# 1482 "parser.ml"
               : Tree.t list * Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list * Tree.t list) in
    Obj.repr(
# 220 "parser.mly"
                                   ( (fst _1, snd _1 @ [Tree.Empty (rhs_end_pos 2)]) )
# 1489 "parser.ml"
               : Tree.t list * Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list * Tree.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 221 "parser.mly"
                                   ( (fst _1, snd _1 @ [_2]) )
# 1497 "parser.ml"
               : Tree.t list * Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list * Tree.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t) in
    Obj.repr(
# 222 "parser.mly"
                                   ( (fst _1, snd _1 @ [Tree.Label (pos 2, _2)]) )
# 1505 "parser.ml"
               : Tree.t list * Tree.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "parser.mly"
                                    ( []       )
# 1511 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 227 "parser.mly"
                                    ( _1 @ [_2] )
# 1519 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 234 "parser.mly"
                                                 ( Tree.IF (pos 1, _2, Tree.Empty (rhs_end_pos 3)) )
# 1526 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 235 "parser.mly"
                                                 ( Tree.IF (pos 1, _2, _4) )
# 1534 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 236 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, _4, _6) )
# 1543 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 237 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, Tree.Empty (rhs_end_pos 3), _5) )
# 1551 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    Obj.repr(
# 238 "parser.mly"
                                                 ( Tree.IF_else (pos 1, _2, _4, Tree.Empty (rhs_end_pos 5)) )
# 1559 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    Obj.repr(
# 242 "parser.mly"
                                                       ( Tree.CASE_expr (pos 1, _2, _5) )
# 1567 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 243 "parser.mly"
                                                       ( Tree.CASE (pos 1, _2, _5) )
# 1576 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 249 "parser.mly"
                                        ( _1 @ [_3] )
# 1584 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    Obj.repr(
# 250 "parser.mly"
                                        ( _1 @ [Tree.Empty (pos 2)] )
# 1591 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 251 "parser.mly"
                                        ( [_1] )
# 1598 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "parser.mly"
                                        ( [Tree.Empty (symbol_start_pos ())] )
# 1604 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 258 "parser.mly"
                              ( Tree.WHILE (pos 1, _2, _3) )
# 1612 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 262 "parser.mly"
                                                                              ( Tree.FOR (pos 1, _2, _4, _6, _7) )
# 1622 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 263 "parser.mly"
                                                                              ( Tree.FOR_step (pos 1,_2,_4,_6,_8,_9) )
# 1633 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 264 "parser.mly"
                                                                              ( Tree.FOR_list (pos 1, _2, _4, _5) )
# 1642 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 268 "parser.mly"
                 ( _2 )
# 1649 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser.mly"
                 ( Tree.Empty (rhs_end_pos 1) )
# 1655 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 277 "parser.mly"
    ( Tree.Variable (pos 1, _1) )
# 1662 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    Obj.repr(
# 279 "parser.mly"
    ( Tree.Dereference (pos 1, _1, _3) )
# 1670 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 281 "parser.mly"
    ( Tree.Substring  (pos 1, Tree.Variable (pos 1, _1), _3, (int_of_string _5)) )
# 1679 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Tree.t list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 283 "parser.mly"
    ( Tree.Substring  (pos 1, Tree.Dereference (pos 1, _1, _3), _6, (int_of_string _8)) )
# 1689 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 287 "parser.mly"
                                                ( [_1] )
# 1696 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 288 "parser.mly"
                                                ( _1 @ [_3] )
# 1704 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "parser.mly"
             ( Tree.STAR (pos 1) )
# 1710 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 293 "parser.mly"
             ( _1 )
# 1717 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "parser.mly"
             ( Tree.Empty (symbol_start_pos ()) )
# 1723 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 301 "parser.mly"
                        ( _1 )
# 1730 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 302 "parser.mly"
                        ( _1 )
# 1737 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 303 "parser.mly"
                        ( _1 )
# 1744 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 304 "parser.mly"
                        ( _1 )
# 1751 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 305 "parser.mly"
                        ( _1 )
# 1758 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 309 "parser.mly"
          ( Tree.C_code (pos 1, None, _2) )
# 1765 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t list) in
    Obj.repr(
# 313 "parser.mly"
                               ( Tree.Simple (pos 1, _1, _2) )
# 1773 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : (Tree.t * Tree.t) list) in
    Obj.repr(
# 317 "parser.mly"
                                                            ( Tree.ARRAY (pos 1, _1, _3, _5) )
# 1782 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t * Tree.t) in
    Obj.repr(
# 321 "parser.mly"
                                  ( [_1] )
# 1789 "parser.ml"
               : (Tree.t * Tree.t) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (Tree.t * Tree.t) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t * Tree.t) in
    Obj.repr(
# 322 "parser.mly"
                                  ( _1 @ [_3] )
# 1797 "parser.ml"
               : (Tree.t * Tree.t) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 326 "parser.mly"
                                    ( (_1, _3) )
# 1805 "parser.ml"
               : Tree.t * Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    Obj.repr(
# 330 "parser.mly"
                                                      ( Tree.RECORD (pos 1, _2, _4) )
# 1813 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 334 "parser.mly"
                                                         ( [_1] )
# 1820 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 335 "parser.mly"
                                                         ( _1 @ [_3] )
# 1828 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    Obj.repr(
# 339 "parser.mly"
                                     ( Tree.INTEGER )
# 1834 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 340 "parser.mly"
                                     ( Tree.REAL )
# 1840 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 341 "parser.mly"
                                     ( Tree.COMPLEX )
# 1846 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 342 "parser.mly"
                                     ( Tree.LONG_REAL )
# 1852 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 343 "parser.mly"
                                     ( Tree.LONG_COMPLEX )
# 1858 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
                                     ( Tree.LOGICAL )
# 1864 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 345 "parser.mly"
                                     ( Tree.BITS )
# 1870 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 346 "parser.mly"
                                     ( Tree.BITS )
# 1877 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 347 "parser.mly"
                                     ( Tree.STRING None )
# 1883 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 348 "parser.mly"
                                     ( Tree.STRING (Some (int_of_string _3)) )
# 1890 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 349 "parser.mly"
                                     ( Tree.STRING_star )
# 1896 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t list) in
    Obj.repr(
# 350 "parser.mly"
                                     ( Tree.REFERENCE (pos 1, _3) )
# 1903 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 354 "parser.mly"
                                   ( [_1] )
# 1910 "parser.ml"
               : Table.Id.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Table.Id.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t) in
    Obj.repr(
# 355 "parser.mly"
                                   ( _1 @ [_3] )
# 1918 "parser.ml"
               : Table.Id.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_body) in
    Obj.repr(
# 362 "parser.mly"
                                                                    ( Tree.PROCEDURE (pos 1, Some _1, _3, _4, _6) )
# 1928 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_body) in
    Obj.repr(
# 363 "parser.mly"
                                                           ( Tree.PROCEDURE (pos 1, None, _2, _3, _5) )
# 1937 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 367 "parser.mly"
                    ( _1 )
# 1944 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 368 "parser.mly"
                    ( Tree.Foreign (pos 1, _1, _2) )
# 1952 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 369 "parser.mly"
                    ( Tree.Empty (symbol_start_pos ()) )
# 1958 "parser.ml"
               : 'procedure_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Tree.t list) in
    Obj.repr(
# 373 "parser.mly"
                                ( _2 )
# 1965 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    Obj.repr(
# 374 "parser.mly"
                                ( [] )
# 1971 "parser.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 378 "parser.mly"
                                                           ( [_1] )
# 1978 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Tree.t) in
    Obj.repr(
# 379 "parser.mly"
                                                           ( _1 @ [_3] )
# 1986 "parser.ml"
               : Tree.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Tree.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t list) in
    Obj.repr(
# 383 "parser.mly"
                                            ( Tree.Name_formal (pos 1, _1, _2) )
# 1994 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t list) in
    Obj.repr(
# 384 "parser.mly"
                                            ( Tree.VALUE_formal (pos 1, _1, _3) )
# 2002 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t list) in
    Obj.repr(
# 385 "parser.mly"
                                            ( Tree.RESULT_formal (pos 1, _1, _3) )
# 2010 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Table.Id.t list) in
    Obj.repr(
# 386 "parser.mly"
                                            ( Tree.VALUE_RESULT_formal (pos 1, _1, _4) )
# 2018 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'formals) in
    Obj.repr(
# 387 "parser.mly"
                                                ( Tree.PROCEDURE_formal (pos 1, Some _1, _3, _4) )
# 2027 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Table.Id.t list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formals) in
    Obj.repr(
# 388 "parser.mly"
                                                ( Tree.PROCEDURE_formal (pos 1, None, _2, _3) )
# 2035 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Tree.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Table.Id.t list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 389 "parser.mly"
                                                         ( Tree.ARRAY_formal (pos 1, _1, _3, _5) )
# 2044 "parser.ml"
               : Tree.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 393 "parser.mly"
                   ( 1 )
# 2050 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    Obj.repr(
# 394 "parser.mly"
                   ( _1 + 1 )
# 2057 "parser.ml"
               : int))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry test_declaration *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Tree.t option * Tree.t)
let test_declaration (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Tree.t)
