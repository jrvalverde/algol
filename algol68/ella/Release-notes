

         EEEEE  L      L        A          222     00     00     00
         E      L      L       A A        2   2   0  0   0  0   0  0
         EEE    L      L      AAAAA          2    0  0   0  0   0  0
         E      L      L      A   A        2      0  0   0  0   0  0
         EEEEE  LLLLL  LLLLL  A   A       22222    00     00     00



           The ELLA 2000 Hardware Design Language Support Software

                            from DRA Malvern

                 Software version:  34.4,  Public release:  2

                             31 March 1995



                        R E L E A S E   N O T E S




        Author:  D.J.Snell for D C Taylour,  ELLA Development Manager

        Authorisation:  Dr C O Newton,  High Level Design Section Leader

        Reference:   DRA/CIS(SE2)/PROJ/F04AH/PDELLA/95005



Source of the public release of the ELLA software:

  1. First release Nov 1993.

        the internet ftp server at Imperial College, London University -

        directory:  src.doc.ic.ac.uk:packages/ELLA

  2. Second release Mar 1995.

        the internet server at DRA Malvern -

        directory:  ftp.dra.hmg.gb:ella


A full description of the ELLA language may be found in:

        ELLA 2000; a Language for Electronic System Design

        by J D Morison and A S Clarke

        McGraw-Hill Book Company, 1993

        ISBN 0-07-707821-7  price 19.95 pounds sterling



                     (c) UK Crown Copyright, 1993

                        Defence Research Agency
                  Farnborough, Hampshire, GU14 6TD, UK


ELLA and ELLA 2000 are trade marks of the UK Secretary of State for Defence.
ELLA is a winner of the 1989 Queen's Award for Technological Achievement.


                 Public Domain ELLA - Release 2 - Notes
                 ______________________________________



This document is provided to give information about known problems in
the current version of the PD ELLA 2000 Software, released in March 1995.
For information about installation, support and contact addresses, please
refer to the README file.


1    Compatibility with the release made in Nov 1993.
     ________________________________________________


1.1  The format of the ELLA library files (.ell) has not changed.  This
     release can read library files produced by the earlier release.

1.2  The format of the open interface file (.ela) has changed to make it
     compatible with the the schema mapping system.  Provision has also been
     made to allow for the future handling of real numbers.  Old open
     interface files cannot be handled by this version of the ELLA system.



2  The bugs list
   _____________

Current known bugs within the ELLA System are given below with a
reference number.  Where circumventions are known they are given.
Please do not report occurances of these bugs.  Please report any
unlisted problems to the ELLA Office (see the README file for
addresses).

PD115:  Crash in the macro transform with attributes and FN macro
        parameters

     MAC M {FN F = () -> () } =  () -> ():
       ( LET fcall = F @a1 (). ).

     FN FF = () -> (): ...

     FN USE_M = ....
      ( LET mcall = M{ FF @a2 () } (). ).


PD117:  Incorrect error message from compiler for circularities

     File1:
        FN A = (bool: ip1) -> bool: ip1.
        FN B =  (bool: ip1) -> bool: A ip1.

     File2:
        FN A = (bool: ip1) -> bool: B ip1.

     The compilation is correctly ignored since A uses B which uses the
     old version of A, but the error message mentions the wrong FNs.


PD142:  Compiler requires an uneccesary JOIN to a fntype with a void
        input.

     FN VOID_FNTYPE = (bool) -> (()->bool: op ): ( JOIN f -> op. ).

     FN PD142 = (bool: ip) -> ():
     ( MAKE VOID_FNTYPE: vf.
       JOIN ip -> vf.
     ).

     To circumvent this problem you need to create a dummy FN with a
     ()->bool input.
     e.g  FN DUMMY = (()->bool) -> (): ().
     and use it to provide the void input to vf
          LET joinvoid = DUMMY vf.


PD194: Printtext produces illegal ELLA

      TYPE signal = NEW (sig | nal).
      FN PD194 = ([9]signal: in) -> [3]signal:
            [INT j = 1..3] in[ (1 + j) * 1 ].

      Some round brackets, used to show bindings) are lost by the
      compiler and so printtext will produce text which is not
      recompilable.  Use brackets transform to replace them.

      FN EMPTY_LET = ([2]signal: in) -> signal:
      ( LET (a, ) = in.
        OUTPUT a
      ).

      printtext prints out LET (a, _6) which is not recompilable.  Use
      names transform to make recompilable.


PD195:  Compiler does not catch illegal ELLA

      TYPE int = NEW i/(1..999).

      MAC M {TYPE ty = NEW (a | b )} = (ty: ip) -> ty: a.

      FN M_INT = (int: ip) -> int: M{int} ip.


PD197:  Stackdumps or "system" error messages from the KEEPSAKE database.

      I'm afraid you will have to create a new library and start again -
      make sure you retain all your ELLA sources so that you can rebuild
      your ELLA library.


PD203:  Legal ELLA rows of implicit calls of FNs delivering fntypes
        give error messages.

        FN BUS = () -> (b->b : p, b->b: q) :  (JOIN b1 -> p, d1 -> q.).

        FN MULTBUS = () -> ():
        ( LET bus5 = [INT i = 1..5] BUS ().
          JOIN [5](?b, ?b) -> bus5.
        ).

        Use an explicit MAKE [5] BUS to get around the problem.


PD204:  Fails to produce error message in the macro transform

     MAC UCONC {INT n} = ([n](b->b): p ) -> [3](b->b):
     ( JOIN ?b -> p[3]
       LET uconc_1 = IO p[1..2] CONC IO p[3].
       OUTPUT IO uconc_1
     ).

     FN PD204 = ([3](b->b): p) ->[3](b->b): UCONC{3}(IO p).

     The circuit will illegal simulate, ignoring the first JOIN to p[3].


PD205:   Incorrect error signal handling in simulator.

     Integer overflow from ARITH statements and <CTRL C> (user
     interrupt) are not working correctly in the simulator.  After such
     an event you should still be in the simulator but in fact you
     may get returned to the ELLA library.  The exact behaviour will
     depend upon circumstances including the version of the operating
     system you are using.


PD207:  Uneccesary errors in the compiler evaluation of IF.

     TYPE int = NEW i/(2..5).

     INT n = 1.

     FN PD207 = (int: in) -> int:
        IF n = 1 THEN i/2 ELSE i/n FI.

     Even though the compiler knows that n = 1 it still evaluates the
     ELSE part of the IF statement, thus giving an error message.
      13.   i/1 ?  This is outside the range  i/(2..5)
                                    !
          IF n = 1 THEN i/2 ELSE i/n FI.

     The problem can be circumvented by using a INT macro parameter.


End of Release-notes



Doc. Ref. No:   DRA/CIS(SE2)/PROJ/F04AH/PDELLA/95005
